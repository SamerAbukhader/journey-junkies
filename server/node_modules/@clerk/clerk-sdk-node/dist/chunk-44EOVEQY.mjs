// src/authenticateRequest.ts
import { constants } from "@clerk/backend";
import cookie from "cookie";

// src/shared.ts
function isValidProxyUrl(key) {
  if (!key) {
    return true;
  }
  return isHttpOrHttps(key) || isProxyUrlRelative(key);
}
function isHttpOrHttps(key) {
  return /^http(s)?:\/\//.test(key || "");
}
function isProxyUrlRelative(key) {
  return key.startsWith("/");
}
function handleValueOrFn(value, url, defaultValue) {
  if (typeof value === "function") {
    return value(url);
  }
  if (typeof value !== "undefined") {
    return value;
  }
  if (typeof defaultValue !== "undefined") {
    return defaultValue;
  }
  return void 0;
}

// src/authenticateRequest.ts
var parseCookies = (req) => {
  return cookie.parse(req.headers["cookie"] || "");
};
async function loadInterstitial({
  clerkClient: clerkClient2,
  requestState
}) {
  if (requestState.publishableKey || requestState.frontendApi) {
    return clerkClient2.localInterstitial({
      frontendApi: requestState.frontendApi,
      publishableKey: requestState.publishableKey,
      proxyUrl: requestState.proxyUrl,
      signInUrl: requestState.signInUrl,
      isSatellite: requestState.isSatellite,
      domain: requestState.domain
    });
  }
  return await clerkClient2.remotePrivateInterstitial();
}
var authenticateRequest = (opts) => {
  const { clerkClient: clerkClient2, apiKey, secretKey, frontendApi, publishableKey, req, options } = opts;
  const cookies = parseCookies(req);
  const { jwtKey, authorizedParties } = options || {};
  const requestUrl = getRequestUrl(req);
  const isSatellite = handleValueOrFn(options?.isSatellite, requestUrl) || process.env.CLERK_IS_SATELLITE === "true" || false;
  const domain = handleValueOrFn(options?.domain, requestUrl) || process.env.CLERK_DOMAIN || "";
  const signInUrl = options?.signInUrl || process.env.CLERK_SIGN_IN_URL || "";
  const proxyUrl = absoluteProxyUrl(
    handleValueOrFn(options?.proxyUrl, requestUrl, process.env.CLERK_PROXY_URL),
    requestUrl.toString()
  );
  if (isSatellite && !proxyUrl && !domain) {
    throw new Error(satelliteAndMissingProxyUrlAndDomain);
  }
  if (isSatellite && !isHttpOrHttps(signInUrl) && isDevelopmentFromApiKey(secretKey)) {
    throw new Error(satelliteAndMissingSignInUrl);
  }
  return clerkClient2.authenticateRequest({
    apiKey,
    secretKey,
    frontendApi,
    publishableKey,
    jwtKey,
    authorizedParties,
    cookieToken: cookies[constants.Cookies.Session] || "",
    headerToken: req.headers[constants.Headers.Authorization]?.replace("Bearer ", "") || "",
    clientUat: cookies[constants.Cookies.ClientUat] || "",
    host: req.headers.host,
    forwardedPort: req.headers[constants.Headers.ForwardedPort],
    forwardedHost: req.headers[constants.Headers.ForwardedHost],
    referrer: req.headers.referer,
    userAgent: req.headers[constants.Headers.UserAgent],
    proxyUrl,
    isSatellite,
    domain,
    signInUrl,
    searchParams: requestUrl.searchParams
  });
};
var handleUnknownCase = (res, requestState) => {
  if (requestState.isUnknown) {
    res.writeHead(401, { "Content-Type": "text/html" });
    res.end();
  }
};
var handleInterstitialCase = (res, requestState, interstitial) => {
  if (requestState.isInterstitial) {
    res.writeHead(401, { "Content-Type": "text/html" });
    res.end(interstitial);
  }
};
var decorateResponseWithObservabilityHeaders = (res, requestState) => {
  requestState.message && res.setHeader(constants.Headers.AuthMessage, encodeURIComponent(requestState.message));
  requestState.reason && res.setHeader(constants.Headers.AuthReason, encodeURIComponent(requestState.reason));
  requestState.status && res.setHeader(constants.Headers.AuthStatus, encodeURIComponent(requestState.status));
};
var isDevelopmentFromApiKey = (apiKey) => apiKey.startsWith("test_") || apiKey.startsWith("sk_test_");
var getRequestUrl = (req) => {
  return new URL(req.url, `${getRequestProto(req)}://${req.headers.host}`);
};
var getRequestProto = (req) => {
  const mightWork = req.connection?.encrypted ? "https" : "http";
  const proto = req.headers[constants.Headers.ForwardedProto] || mightWork;
  if (!proto) {
    throw new Error(missingProto);
  }
  return proto.split(",")[0].trim();
};
var absoluteProxyUrl = (relativeOrAbsoluteUrl, baseUrl) => {
  if (!relativeOrAbsoluteUrl || !isValidProxyUrl(relativeOrAbsoluteUrl) || !isProxyUrlRelative(relativeOrAbsoluteUrl)) {
    return relativeOrAbsoluteUrl;
  }
  return new URL(relativeOrAbsoluteUrl, baseUrl).toString();
};
var satelliteAndMissingProxyUrlAndDomain = "Missing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl";
var satelliteAndMissingSignInUrl = `
Invalid signInUrl. A satellite application requires a signInUrl for development instances.
Check if signInUrl is missing from your configuration or if it is not an absolute URL.`;
var missingProto = "Cannot determine the request protocol. Please ensure you've set the X-Forwarded-Proto header with the request protocol (http or https).";

// src/clerkExpressRequireAuth.ts
var createClerkExpressRequireAuth = (createOpts) => {
  const { clerkClient: clerkClient2, frontendApi = "", apiKey = "", secretKey = "", publishableKey = "" } = createOpts;
  return (options = {}) => {
    return async (req, res, next) => {
      const requestState = await authenticateRequest({
        clerkClient: clerkClient2,
        apiKey,
        secretKey,
        frontendApi,
        publishableKey,
        req,
        options
      });
      decorateResponseWithObservabilityHeaders(res, requestState);
      if (requestState.isUnknown) {
        return handleUnknownCase(res, requestState);
      }
      if (requestState.isInterstitial) {
        const interstitial = await loadInterstitial({
          clerkClient: clerkClient2,
          requestState
        });
        return handleInterstitialCase(res, requestState, interstitial);
      }
      if (requestState.isSignedIn) {
        req.auth = { ...requestState.toAuth(), claims: requestState.toAuth().sessionClaims };
        next();
        return;
      }
      next(new Error("Unauthenticated"));
    };
  };
};

// src/clerkExpressWithAuth.ts
var createClerkExpressWithAuth = (createOpts) => {
  const { clerkClient: clerkClient2, frontendApi = "", apiKey = "", secretKey = "", publishableKey = "" } = createOpts;
  return (options = {}) => {
    return async (req, res, next) => {
      const requestState = await authenticateRequest({
        clerkClient: clerkClient2,
        apiKey,
        secretKey,
        frontendApi,
        publishableKey,
        req,
        options
      });
      decorateResponseWithObservabilityHeaders(res, requestState);
      if (requestState.isUnknown) {
        return handleUnknownCase(res, requestState);
      }
      if (requestState.isInterstitial) {
        const interstitial = await loadInterstitial({
          clerkClient: clerkClient2,
          requestState
        });
        return handleInterstitialCase(res, requestState, interstitial);
      }
      req.auth = {
        ...requestState.toAuth(),
        claims: requestState.toAuth().sessionClaims
      };
      next();
    };
  };
};

// src/clerkClient.ts
import { Clerk as _Clerk, decodeJwt, verifyToken as _verifyToken } from "@clerk/backend";
var API_URL = process.env.CLERK_API_URL || "https://api.clerk.dev";
var API_VERSION = process.env.CLERK_API_VERSION || "v1";
var API_KEY = process.env.CLERK_SECRET_KEY || process.env.CLERK_API_KEY || "";
var PUBLISHABLE_KEY = process.env.CLERK_PUBLISHABLE_KEY || "";
var DOMAIN = process.env.CLERK_DOMAIN || "";
var PROXY_URL = process.env.CLERK_PROXY_URL || "";
var SIGN_IN_URL = process.env.CLERK_SIGN_IN_URL || "";
var IS_SATELLITE = process.env.CLERK_IS_SATELLITE === "true";
function Clerk(options) {
  const clerkClient2 = _Clerk(options);
  const expressWithAuth = createClerkExpressWithAuth({ ...options, clerkClient: clerkClient2 });
  const expressRequireAuth = createClerkExpressRequireAuth({ ...options, clerkClient: clerkClient2 });
  const verifyToken = (token, verifyOpts) => {
    const issuer = (iss) => iss.startsWith("https://clerk.") || iss.includes(".clerk.accounts");
    return _verifyToken(token, { issuer, ...options, ...verifyOpts });
  };
  return {
    ...clerkClient2,
    expressWithAuth,
    expressRequireAuth,
    verifyToken,
    ...createBasePropForRedwoodCompatibility()
  };
}
var createBasePropForRedwoodCompatibility = () => {
  const verifySessionToken = (token) => {
    const { payload } = decodeJwt(token);
    return _verifyToken(token, {
      issuer: payload.iss,
      jwtKey: process.env.CLERK_JWT_KEY
    });
  };
  return { base: { verifySessionToken } };
};
var createClerkClient = Clerk;
var clerkClient = Clerk({
  secretKey: API_KEY,
  apiKey: API_KEY,
  apiUrl: API_URL,
  apiVersion: API_VERSION,
  domain: DOMAIN,
  isSatellite: IS_SATELLITE,
  publishableKey: PUBLISHABLE_KEY,
  proxyUrl: PROXY_URL,
  userAgent: "@clerk/clerk-sdk-node"
});
var ClerkExpressRequireAuth = createClerkExpressRequireAuth({
  clerkClient,
  apiUrl: API_URL,
  apiKey: API_KEY,
  secretKey: API_KEY,
  publishableKey: PUBLISHABLE_KEY
});
var ClerkExpressWithAuth = createClerkExpressWithAuth({
  clerkClient,
  apiUrl: API_URL,
  apiKey: API_KEY,
  secretKey: API_KEY,
  publishableKey: PUBLISHABLE_KEY
});
var setClerkApiKey = (value) => {
  clerkClient.__unstable_options.apiKey = value;
};
var setClerkServerApiUrl = (value) => {
  clerkClient.__unstable_options.apiUrl = value;
};
var setClerkApiVersion = (value) => {
  clerkClient.__unstable_options.apiVersion = value;
};
var setClerkHttpOptions = (value) => {
  clerkClient.__unstable_options.httpOptions = value;
};

export {
  createClerkExpressRequireAuth,
  createClerkExpressWithAuth,
  API_URL,
  PUBLISHABLE_KEY,
  Clerk,
  createClerkClient,
  clerkClient,
  ClerkExpressRequireAuth,
  ClerkExpressWithAuth,
  setClerkApiKey,
  setClerkServerApiUrl,
  setClerkApiVersion,
  setClerkHttpOptions
};
//# sourceMappingURL=chunk-44EOVEQY.mjs.map