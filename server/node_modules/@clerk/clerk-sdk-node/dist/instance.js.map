{"version":3,"sources":["../src/instance.ts","../src/clerkClient.ts","../src/authenticateRequest.ts","../src/shared.ts","../src/clerkExpressRequireAuth.ts","../src/clerkExpressWithAuth.ts"],"sourcesContent":["import { Clerk } from './clerkClient';\n\nexport default Clerk;\n\nexport { WithAuthProp, RequireAuthProp } from './types';\n\nexport {\n  AllowlistIdentifier,\n  Client,\n  Email,\n  EmailAddress,\n  ExternalAccount,\n  IdentificationLink,\n  Invitation,\n  Organization,\n  OrganizationInvitation,\n  OrganizationMembership,\n  OrganizationMembershipPublicUserData,\n  PhoneNumber,\n  Session,\n  SMSMessage,\n  User,\n  Verification,\n} from '@clerk/backend';\n","import type { ClerkOptions, VerifyTokenOptions } from '@clerk/backend';\nimport { Clerk as _Clerk, decodeJwt, verifyToken as _verifyToken } from '@clerk/backend';\n\nimport { createClerkExpressRequireAuth } from './clerkExpressRequireAuth';\nimport { createClerkExpressWithAuth } from './clerkExpressWithAuth';\n\nexport const API_URL = process.env.CLERK_API_URL || 'https://api.clerk.dev';\nexport const API_VERSION = process.env.CLERK_API_VERSION || 'v1';\nexport const API_KEY = process.env.CLERK_SECRET_KEY || process.env.CLERK_API_KEY || '';\nexport const PUBLISHABLE_KEY = process.env.CLERK_PUBLISHABLE_KEY || '';\n\nexport const DOMAIN = process.env.CLERK_DOMAIN || '';\nexport const PROXY_URL = process.env.CLERK_PROXY_URL || '';\nexport const SIGN_IN_URL = process.env.CLERK_SIGN_IN_URL || '';\nexport const IS_SATELLITE = process.env.CLERK_IS_SATELLITE === 'true';\n\n/**\n * This needs to be a *named* function in order to support the older\n * new Clerk() syntax for v4 compatibility.\n * Arrow functions can never be called with the new keyword because they do not have the [[Construct]] method\n */\nexport function Clerk(options: ClerkOptions) {\n  const clerkClient = _Clerk(options);\n  const expressWithAuth = createClerkExpressWithAuth({ ...options, clerkClient });\n  const expressRequireAuth = createClerkExpressRequireAuth({ ...options, clerkClient });\n  const verifyToken = (token: string, verifyOpts?: VerifyTokenOptions) => {\n    const issuer = (iss: string) => iss.startsWith('https://clerk.') || iss.includes('.clerk.accounts');\n    return _verifyToken(token, { issuer, ...options, ...verifyOpts });\n  };\n\n  return {\n    ...clerkClient,\n    expressWithAuth,\n    expressRequireAuth,\n    verifyToken,\n    ...createBasePropForRedwoodCompatibility(),\n  };\n}\n\nconst createBasePropForRedwoodCompatibility = () => {\n  const verifySessionToken = (token: string) => {\n    const { payload } = decodeJwt(token);\n    return _verifyToken(token, {\n      issuer: payload.iss,\n      jwtKey: process.env.CLERK_JWT_KEY,\n    });\n  };\n  return { base: { verifySessionToken } };\n};\n\nexport const createClerkClient = Clerk;\n\nexport const clerkClient = Clerk({\n  secretKey: API_KEY,\n  apiKey: API_KEY,\n  apiUrl: API_URL,\n  apiVersion: API_VERSION,\n  domain: DOMAIN,\n  isSatellite: IS_SATELLITE,\n  publishableKey: PUBLISHABLE_KEY,\n  proxyUrl: PROXY_URL,\n  userAgent: '@clerk/clerk-sdk-node',\n});\n\n/**\n * Stand-alone express middlewares bound to the pre-initialised clerkClient\n */\nexport const ClerkExpressRequireAuth = createClerkExpressRequireAuth({\n  clerkClient,\n  apiUrl: API_URL,\n  apiKey: API_KEY,\n  secretKey: API_KEY,\n  publishableKey: PUBLISHABLE_KEY,\n});\n\nexport const ClerkExpressWithAuth = createClerkExpressWithAuth({\n  clerkClient,\n  apiUrl: API_URL,\n  apiKey: API_KEY,\n  secretKey: API_KEY,\n  publishableKey: PUBLISHABLE_KEY,\n});\n\n/**\n * Stand-alone setters bound to the pre-initialised clerkClient\n */\nexport const setClerkApiKey = (value: string) => {\n  clerkClient.__unstable_options.apiKey = value;\n};\n\nexport const setClerkServerApiUrl = (value: string) => {\n  clerkClient.__unstable_options.apiUrl = value;\n};\n\nexport const setClerkApiVersion = (value: string) => {\n  clerkClient.__unstable_options.apiVersion = value;\n};\n\nexport const setClerkHttpOptions = (value: RequestInit) => {\n  clerkClient.__unstable_options.httpOptions = value;\n};\n","import type { Clerk, RequestState } from '@clerk/backend';\nimport { constants } from '@clerk/backend';\nimport cookie from 'cookie';\nimport type { IncomingMessage, ServerResponse } from 'http';\n\nimport { handleValueOrFn, isHttpOrHttps, isProxyUrlRelative, isValidProxyUrl } from './shared';\nimport type { ClerkMiddlewareOptions } from './types';\n\nconst parseCookies = (req: IncomingMessage) => {\n  return cookie.parse(req.headers['cookie'] || '');\n};\n\ntype ClerkClient = ReturnType<typeof Clerk>;\n\nexport async function loadInterstitial({\n  clerkClient,\n  requestState,\n}: {\n  clerkClient: ClerkClient;\n  requestState: RequestState;\n}) {\n  /**\n   * When publishable key or frontendApi is present utilize the localInterstitial method\n   * and avoid the extra network call\n   */\n  if (requestState.publishableKey || requestState.frontendApi) {\n    return clerkClient.localInterstitial({\n      frontendApi: requestState.frontendApi,\n      publishableKey: requestState.publishableKey,\n      proxyUrl: requestState.proxyUrl,\n      signInUrl: requestState.signInUrl,\n      isSatellite: requestState.isSatellite,\n      domain: requestState.domain,\n    });\n  }\n  return await clerkClient.remotePrivateInterstitial();\n}\n\nexport const authenticateRequest = (opts: {\n  clerkClient: ReturnType<typeof Clerk>;\n  apiKey: string;\n  secretKey: string;\n  frontendApi: string;\n  publishableKey: string;\n  req: IncomingMessage;\n  options?: ClerkMiddlewareOptions;\n}) => {\n  const { clerkClient, apiKey, secretKey, frontendApi, publishableKey, req, options } = opts;\n  const cookies = parseCookies(req);\n  const { jwtKey, authorizedParties } = options || {};\n\n  const requestUrl = getRequestUrl(req);\n  const isSatellite =\n    handleValueOrFn(options?.isSatellite, requestUrl) || process.env.CLERK_IS_SATELLITE === 'true' || false;\n  const domain = handleValueOrFn(options?.domain, requestUrl) || process.env.CLERK_DOMAIN || '';\n  const signInUrl = options?.signInUrl || process.env.CLERK_SIGN_IN_URL || '';\n  const proxyUrl = absoluteProxyUrl(\n    handleValueOrFn(options?.proxyUrl, requestUrl, process.env.CLERK_PROXY_URL) as string,\n    requestUrl.toString(),\n  );\n\n  if (isSatellite && !proxyUrl && !domain) {\n    throw new Error(satelliteAndMissingProxyUrlAndDomain);\n  }\n\n  if (isSatellite && !isHttpOrHttps(signInUrl) && isDevelopmentFromApiKey(secretKey)) {\n    throw new Error(satelliteAndMissingSignInUrl);\n  }\n\n  return clerkClient.authenticateRequest({\n    apiKey,\n    secretKey,\n    frontendApi,\n    publishableKey,\n    jwtKey,\n    authorizedParties,\n    cookieToken: cookies[constants.Cookies.Session] || '',\n    headerToken: req.headers[constants.Headers.Authorization]?.replace('Bearer ', '') || '',\n    clientUat: cookies[constants.Cookies.ClientUat] || '',\n    host: req.headers.host as string,\n    forwardedPort: req.headers[constants.Headers.ForwardedPort] as string,\n    forwardedHost: req.headers[constants.Headers.ForwardedHost] as string,\n    referrer: req.headers.referer,\n    userAgent: req.headers[constants.Headers.UserAgent] as string,\n    proxyUrl,\n    isSatellite,\n    domain,\n    signInUrl,\n    searchParams: requestUrl.searchParams,\n  });\n};\nexport const handleUnknownCase = (res: ServerResponse, requestState: RequestState) => {\n  if (requestState.isUnknown) {\n    res.writeHead(401, { 'Content-Type': 'text/html' });\n    res.end();\n  }\n};\n\nexport const handleInterstitialCase = (res: ServerResponse, requestState: RequestState, interstitial: string) => {\n  if (requestState.isInterstitial) {\n    res.writeHead(401, { 'Content-Type': 'text/html' });\n    res.end(interstitial);\n  }\n};\n\nexport const decorateResponseWithObservabilityHeaders = (res: ServerResponse, requestState: RequestState) => {\n  requestState.message && res.setHeader(constants.Headers.AuthMessage, encodeURIComponent(requestState.message));\n  requestState.reason && res.setHeader(constants.Headers.AuthReason, encodeURIComponent(requestState.reason));\n  requestState.status && res.setHeader(constants.Headers.AuthStatus, encodeURIComponent(requestState.status));\n};\n\nconst isDevelopmentFromApiKey = (apiKey: string): boolean =>\n  apiKey.startsWith('test_') || apiKey.startsWith('sk_test_');\n\nconst getRequestUrl = (req: IncomingMessage): URL => {\n  return new URL(req.url as string, `${getRequestProto(req)}://${req.headers.host}`);\n};\n\nconst getRequestProto = (req: IncomingMessage): string => {\n  // @ts-ignore Optimistic attempt to get the protocol in case\n  // req extends IncomingMessage in a useful way. No guarantee\n  // it'll work.\n  const mightWork = req.connection?.encrypted ? 'https' : 'http';\n  // The x-forwarded-proto header takes precedence.\n  const proto = (req.headers[constants.Headers.ForwardedProto] as string) || mightWork;\n  if (!proto) {\n    throw new Error(missingProto);\n  }\n  // Sometimes the x-forwarded-proto header does not come as a\n  // single value.\n  return proto.split(',')[0].trim();\n};\n\nconst absoluteProxyUrl = (relativeOrAbsoluteUrl: string, baseUrl: string): string => {\n  if (!relativeOrAbsoluteUrl || !isValidProxyUrl(relativeOrAbsoluteUrl) || !isProxyUrlRelative(relativeOrAbsoluteUrl)) {\n    return relativeOrAbsoluteUrl;\n  }\n  return new URL(relativeOrAbsoluteUrl, baseUrl).toString();\n};\n\nconst satelliteAndMissingProxyUrlAndDomain =\n  'Missing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl';\nconst satelliteAndMissingSignInUrl = `\nInvalid signInUrl. A satellite application requires a signInUrl for development instances.\nCheck if signInUrl is missing from your configuration or if it is not an absolute URL.`;\nconst missingProto =\n  \"Cannot determine the request protocol. Please ensure you've set the X-Forwarded-Proto header with the request protocol (http or https).\";\n","/**\n * These functions originate from @clerk/shared\n * Maintain these until @clerk/shared does not depend on react\n */\nexport function isValidProxyUrl(key: string | undefined) {\n  if (!key) {\n    return true;\n  }\n\n  return isHttpOrHttps(key) || isProxyUrlRelative(key);\n}\n\nexport function isHttpOrHttps(key: string | undefined) {\n  return /^http(s)?:\\/\\//.test(key || '');\n}\n\nexport function isProxyUrlRelative(key: string) {\n  return key.startsWith('/');\n}\n\nexport function proxyUrlToAbsoluteURL(url: string | undefined): string {\n  if (!url) {\n    return '';\n  }\n  return isProxyUrlRelative(url) ? new URL(url, window.location.origin).toString() : url;\n}\n\nexport function getRequestUrl({ request, relativePath }: { request: Request; relativePath?: string }): URL {\n  const { headers, url: initialUrl } = request;\n  const url = new URL(initialUrl);\n  const host = headers.get('X-Forwarded-Host') ?? headers.get('host') ?? (headers as any)['host'] ?? url.host;\n\n  // X-Forwarded-Proto could be 'https, http'\n  let protocol =\n    (headers.get('X-Forwarded-Proto') ?? (headers as any)['X-Forwarded-Proto'])?.split(',')[0] ?? url.protocol;\n  protocol = protocol.replace(/[:/]/, '');\n\n  return new URL(relativePath || url.pathname, `${protocol}://${host}`);\n}\n\ntype VOrFnReturnsV<T> = T | undefined | ((v: URL) => T);\nexport function handleValueOrFn<T>(value: VOrFnReturnsV<T>, url: URL): T | undefined;\nexport function handleValueOrFn<T>(value: VOrFnReturnsV<T>, url: URL, defaultValue: T): T;\nexport function handleValueOrFn<T>(value: VOrFnReturnsV<T>, url: URL, defaultValue?: unknown): unknown {\n  if (typeof value === 'function') {\n    return (value as (v: URL) => T)(url);\n  }\n\n  if (typeof value !== 'undefined') {\n    return value;\n  }\n\n  if (typeof defaultValue !== 'undefined') {\n    return defaultValue;\n  }\n\n  return undefined;\n}\n","import type { Clerk } from '@clerk/backend';\n\nimport {\n  authenticateRequest,\n  decorateResponseWithObservabilityHeaders,\n  handleInterstitialCase,\n  handleUnknownCase,\n  loadInterstitial,\n} from './authenticateRequest';\nimport type { ClerkMiddlewareOptions, MiddlewareRequireAuthProp, RequireAuthProp } from './types';\n\nexport type CreateClerkExpressMiddlewareOptions = {\n  clerkClient: ReturnType<typeof Clerk>;\n  /**\n   * @deprecated Use `secretKey` instead.\n   */\n  apiKey?: string;\n  /* Secret Key */\n  secretKey?: string;\n  /**\n   * @deprecated Use `publishableKey` instead.\n   */\n  frontendApi?: string;\n  publishableKey?: string;\n  apiUrl?: string;\n};\n\nexport const createClerkExpressRequireAuth = (createOpts: CreateClerkExpressMiddlewareOptions) => {\n  const { clerkClient, frontendApi = '', apiKey = '', secretKey = '', publishableKey = '' } = createOpts;\n\n  return (options: ClerkMiddlewareOptions = {}): MiddlewareRequireAuthProp => {\n    return async (req, res, next) => {\n      const requestState = await authenticateRequest({\n        clerkClient,\n        apiKey,\n        secretKey,\n        frontendApi,\n        publishableKey,\n        req,\n        options,\n      });\n      decorateResponseWithObservabilityHeaders(res, requestState);\n      if (requestState.isUnknown) {\n        return handleUnknownCase(res, requestState);\n      }\n      if (requestState.isInterstitial) {\n        const interstitial = await loadInterstitial({\n          clerkClient,\n          requestState,\n        });\n        return handleInterstitialCase(res, requestState, interstitial);\n      }\n\n      if (requestState.isSignedIn) {\n        (req as RequireAuthProp<any>).auth = { ...requestState.toAuth(), claims: requestState.toAuth().sessionClaims };\n        next();\n        return;\n      }\n\n      next(new Error('Unauthenticated'));\n    };\n  };\n};\n","import {\n  authenticateRequest,\n  decorateResponseWithObservabilityHeaders,\n  handleInterstitialCase,\n  handleUnknownCase,\n  loadInterstitial,\n} from './authenticateRequest';\nimport type { CreateClerkExpressMiddlewareOptions } from './clerkExpressRequireAuth';\nimport type { ClerkMiddlewareOptions, MiddlewareWithAuthProp, WithAuthProp } from './types';\n\nexport const createClerkExpressWithAuth = (createOpts: CreateClerkExpressMiddlewareOptions) => {\n  const { clerkClient, frontendApi = '', apiKey = '', secretKey = '', publishableKey = '' } = createOpts;\n  return (options: ClerkMiddlewareOptions = {}): MiddlewareWithAuthProp => {\n    return async (req, res, next) => {\n      const requestState = await authenticateRequest({\n        clerkClient,\n        apiKey,\n        secretKey,\n        frontendApi,\n        publishableKey,\n        req,\n        options,\n      });\n      decorateResponseWithObservabilityHeaders(res, requestState);\n      if (requestState.isUnknown) {\n        return handleUnknownCase(res, requestState);\n      }\n      if (requestState.isInterstitial) {\n        const interstitial = await loadInterstitial({\n          clerkClient,\n          requestState,\n        });\n        return handleInterstitialCase(res, requestState, interstitial);\n      }\n\n      (req as WithAuthProp<any>).auth = {\n        ...requestState.toAuth(),\n        claims: requestState.toAuth().sessionClaims,\n      };\n      next();\n    };\n  };\n};\n"],"mappings":"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","names":["import_backend","cookie","clerkClient","clerkClient","clerkClient","clerkClient","_Clerk","_verifyToken","import_backend"]}